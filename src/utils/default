# HTTP server to redirect to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name daemonoakz.ddns.net;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

# HTTPS server to handle requests and proxy to Fastify
server {
    listen 443 ssl;
    listen [::]:443 ssl ipv6only=on;
    server_name daemonoakz.ddns.net;

    location = /favicon.ico {
        log_not_found off;  # Stop logging this specific file request
        return 404;
    }

    # SSL Configuration (Managed by Certbot)
    ssl_certificate /etc/letsencrypt/live/daemonoakz.ddns.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/daemonoakz.ddns.net/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Security Headers
    add_header X-Frame-Options "DENY";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    add_header Referrer-Policy "no-referrer";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    add_header X-Permitted-Cross-Domain-Policies "none";
    add_header Content-Security-Policy "
        default-src 'self';
        style-src 'self';
        script-src 'self';
        img-src 'self' data:;
        connect-src 'self';
        font-src 'self';
        frame-ancestors 'self';
        object-src 'none';
    " always;

    # Block access to sensitive directories and files
    location ~ /\.(git|svn|ht|env|bak|old|backup|config\.php) {
        deny all;
        return 444;
    }

    location /logs/ {
        deny all;
        return 444;
    }

    location /tmp/ {
        deny all;
        return 444;
    }

    # Block exact "/" requests
    location = / {
        return 420;
    }

    # Proxy requests to Node.js on port 7000 (excluding "/")
    location / {
        limit_req zone=rate_limit burst=20 nodelay;
        proxy_pass http://localhost:7000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header Cookie $http_cookie;
        proxy_cache_bypass $http_upgrade;
    }

    # Apply rate limiting to the entire server
    limit_req zone=rate_limit burst=5 nodelay;

    # Additional hardening against request-based attacks
    client_body_buffer_size 1k;
    client_max_body_size 1m;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;
    client_body_timeout 10s;
    client_header_timeout 10s;
    keepalive_timeout 5s 5s;
    send_timeout 10s;
}
